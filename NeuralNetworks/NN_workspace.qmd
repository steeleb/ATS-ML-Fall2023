---
title: "Estimation of Daily Water Temperature using Dense Neural Networks"
author: "B Steele"
date: today
date-format: long
format: pdf
editor: 
  visual:
    theme: sky
---

```{r, env-set-up}
library(tidyverse)
library(reticulate)
library(kableExtra)

# file paths
nn_dir = '~/OneDrive - Colostate/NASA-Northern/data/NN_train_val_test/'

# activate conda env
use_condaenv('~/miniconda3/envs/env_ATSML/')

```

```{python, import-modules}
#| echo: false

#high level modules
import os
import os
import sys
import imp
import numpy as np
import seaborn as sb
import pandas as pd
import datetime
import pickle

# ml/ai modules
import tensorflow as tf
# Let's import some different things we will use to build the neural network
from tensorflow.keras import Model
from tensorflow.keras.layers import Dense, Input, Dropout, Softmax

# import plt
import matplotlib.pyplot as plt
import matplotlib.patches as patches

# import custom modules
imp.load_source("settings","NeuralNetworks/settings.py")
from settings import settings
imp.load_source("tvt", "NeuralNetworks/preprocessing.py")
from tvt import train1, val1, train2, val2, train3, val3, train4, val4, train5, val5, train6, val6
from tvt import train1_ts, val1_ts, train2_ts, val2_ts, train3_ts, val3_ts, train4_ts, val4_ts
imp.load_source("architecture", "NeuralNetworks/architecture.py")
from architecture import build_model, compile_model
imp.load_source("tvt", "NeuralNetworks/preprocessing.py")
from tvt import train1, val1, train2, val2, train3, val3, train4, val4, train5, val5, train6, val6
from tvt import train1_ts, val1_ts, train2_ts, val2_ts, train3_ts, val3_ts, train4_ts, val4_ts
imp.load_source("architecture", "NeuralNetworks/architecture.py")
from architecture import build_model, compile_model

print(f"python version = {sys.version}")
print(f"numpy version = {np.__version__}")
print(f"tensorflow version = {tf.__version__}")
```

### Look at the training data

```{r}
make_histogram <- function(param){
  param_sym = sym(param)
  ggplot(training, aes(x = !!{{ param_sym }})) +
    geom_histogram() +
    theme_bw()
}

training <- read_csv(file.path(nn_dir, "training_set_up_to_2021_v2023-11-08.csv"))
param_list = names(training)
param_list = param_list[8:length(param_list)]

map(param_list, make_histogram)
```

Precip data needs log transformation before standardization due to histo frequency.

Wind data needs sqrt transormation.

These transformations have been made in the _preprocessing.py script.

## Train/Val sets

### Format LOO dataset for algo dev

```{python, labels-features}
#| echo: false



```

#### And for ts chunks

```{python, timeseries-test-val}
#| echo: false

```

## Make a baseline dataset

```{r, baseline}
baseline_by_date <- training %>% 
  group_by(day_of_year) %>% 
  summarize(mean_temp_by_date_deg_C = mean(value),
            n = n()) %>% 
  left_join(training, .) %>% 
  #remove days where there are less than or equal to 3 observations contributing to the mean
  filter(n > 3)
```

### Calculate baseline error

```{python, baseline-error}
#| echo: false
baseline_day = r.baseline_by_date
mae_baseline_day_errors = np.mean(abs(baseline_day['value'] - baseline_day['mean_temp_by_date_deg_C']))
mse_baseline_day_errors = np.sqrt(np.mean(abs(baseline_day['value'] - baseline_day['mean_temp_by_date_deg_C'])**2))
```


```{python, train-1}
fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history_1.history["loss"], label="training")
axs[0].plot(history_1.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history_1.history["loss"], label="training")
axs[1].plot(history_1.history["val_loss"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Squared Error")
axs[1].legend()

fig.suptitle("LOO dataset 1")

fig.show()
```


```{python, train-2}
fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history_2.history["loss"], label="training")
axs[0].plot(history_2.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history_2.history["loss"], label="training")
axs[1].plot(history_2.history["val_loss"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Squared Error")
axs[1].legend()

fig.suptitle("LOO dataset 2")

fig.show()
```

```{python, train-3}
fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history_3.history["loss"], label="training")
axs[0].plot(history_3.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history_3.history["loss"], label="training")
axs[1].plot(history_3.history["val_loss"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Squared Error")
axs[1].legend()

fig.suptitle("LOO dataset 3")

fig.show()
```

```{python, train-4}
fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history_4.history["loss"], label="training")
axs[0].plot(history_4.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history_4.history["loss"], label="training")
axs[1].plot(history_4.history["val_loss"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Squared Error")
axs[1].legend()

fig.suptitle("LOO dataset 4")

fig.show()
```

```{python, train-5}
fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history_5.history["loss"], label="training")
axs[0].plot(history_5.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history_5.history["loss"], label="training")
axs[1].plot(history_5.history["val_loss"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Squared Error")
axs[1].legend()

fig.suptitle("LOO dataset 5")

fig.show()
```

```{python, train-6}
fig, axs = plt.subplots(1, 2, figsize=(10, 4))

axs[0].plot(history_6.history["loss"], label="training")
axs[0].plot(history_6.history["val_loss"], label="validation")
axs[0].set_xlabel("Epoch")
axs[0].set_ylabel("Loss")
axs[0].legend()

axs[1].plot(history_6.history["loss"], label="training")
axs[1].plot(history_6.history["val_loss"], label="validation")
axs[1].set_xlabel("Epoch")
axs[1].set_ylabel("Mean Squared Error")
axs[1].legend()

fig.suptitle("LOO dataset 6")

fig.show()
```